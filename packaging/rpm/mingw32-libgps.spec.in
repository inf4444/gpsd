# Public Domain CC0

%define _pkg_name gpsd
Name:           mingw32-libgps
Version:        @VERSION@
Release:        0
Summary:        Client library (only) in C for talking to a running gpsd
# Enabling C++ / Python cross build is left as an exercise for the reader...
License:        BSD-3-Clause
Group:          Development/Libraries/C
Url:            http://www.catb.org/gpsd/
Source0:        http://download-mirror.savannah.gnu.org/releases/gpsd/%{_pkg_name}-%{version}.tar.gz
Source98:       http://download-mirror.savannah.gnu.org/releases/gpsd/%{_pkg_name}-%{version}.tar.gz.sig
BuildRequires:	mingw32-filesystem
BuildRequires:	mingw32-binutils
BuildRequires:	mingw32-runtime
BuildRequires:	mingw32-cross-binutils
BuildRequires:	mingw32-cross-gcc
BuildRequires:	mingw32-cross-pkg-config
BuildRequires:  mingw32-cross-gcc-c++
BuildRequires:  scons >= 2.0.1
Requires(pre):  %fillup_prereq
Requires(pre):  coreutils
BuildRoot:      %{_tmppath}/%{name}-%{version}-build

%description
This package provides the shared library for accessing gpsd from other
GPS aware applications via the C API only.

%package devel
Summary:        Client libraries in C for talking to a running gpsd
Group:          Development/Libraries/C

%description devel
This package provides C header files for the gpsd shared libraries that
manage access to a GPS for applications and debugging tools.

%prep
%setup -q -n %{_pkg_name}-%{version}

# don't set RPATH
sed -i 's|env.Prepend.*RPATH.*|pass #\0|' SConstruct

%build
# NB Force off the default stack-protector, otherwise probably need gcc runtime embedded in the dll
export CFLAGS="%{optflags} -fno-stack-protector -std=gnu99 -mconsole -Wl,--subsystem -Wl,console"
# Currently not been able to successfully pass these into scons (either via command line or evironment variable)
#  and so must be hardcoded into the SConstruct file
#export SHLINKFLAGS="-Wl,--dll -shared -lws2_32 -lwinpthread -Wl,--output-def,libgps.def -Wl,--out-implib,libgps.a"
#export SHLIBSUFFIX='.dll'
scons target=i686-w64-mingw32 \
shared=True \
socket_export=True \
gpsd=False \
gpsdclients=False \
minimal=True
#test_libgps

#mv test_libgps test_libgps.exe
# It's possible to build test_libgps but this doesn't generate the RPM.

%install
# Simple manual copy to install locally
mkdir -p %{buildroot}%{_mingw32_includedir}
cp gps.h %{buildroot}%{_mingw32_includedir}
mkdir -p %{buildroot}%{_mingw32_bindir}
cp libgps.dll %{buildroot}%{_mingw32_bindir}
mkdir -p %{buildroot}%{_mingw32_libdir}
cp libgps.a %{buildroot}%{_mingw32_libdir}
cp libgps.def %{buildroot}%{_mingw32_libdir}

%pre

%post

%preun

%postun

%files
%defattr(-,root,root)
%doc README COPYING
%{_mingw32_bindir}/libgps.dll
%{_mingw32_libdir}/libgps.a
%{_mingw32_libdir}/libgps.def

%files devel
%defattr(-,root,root)
%doc README COPYING
%{_mingw32_includedir}/gps.h

%changelog
